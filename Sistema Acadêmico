using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;

namespace N1
{
    class Program
    {
        #region STRUCTS
        struct Disciplina //estrutura da disciplina
        {
            public int Codigo;
            public string Nome, Sigla;
        }

        struct Aluno //estrutura do Aluno
        {
            public int Codigo;
            public string Nome;
        }

        struct Nota
        {
            public int CodDisciplina ;
            public int CodAluno;
            public double NotaAluno;
        }

        #endregion

        #region ARRAYS
        static Disciplina[] Disciplinas = new Disciplina[5]; //vetor disciplina de no max 5 disciplinas
        static Aluno[] Alunos = new Aluno[40]; //vetor Aluno de no max 40 Alunos
        static Nota[] Notas = new Nota[200]; //vetor Nota de no max 40 Alunos
        static int qtdeD = 0, qtdeA = 0, qtdeN = 0;
        #endregion

        const string nomeArquivo = "dadosSalvos.txt";
        static int qtdAluno = 0,
                   qtdDisciplina = 0,
                   qtdNota = 0;

        static void Main(string[] args)
        {
            if (!File.Exists(nomeArquivo))
                Salvar();

            Carregar();

            Menu();

            Console.ReadKey();
        }

        #region Método Menu
        static void Menu()
        {
            int opcao = 0;

            Console.Clear();
            Console.Write("--- SISTEMA DE DIGITAÇÃO DE NOTAS --- \n\nBem vindo! Digite uma opção: " +
                "\n\n(1) Desenvolvedores \n(2) Cadastro de Disciplinas \n(3) Cadastro de alunos \n(4) Lançamento de notas por disciplina" +
                "\n(5) Alteração de nota do aluno \n(6) Sair");

            do
            {
                try
                {
                    Console.Write("\n\nSua opção: ");
                    opcao = int.Parse(Console.ReadLine());
                    if (opcao > 0 && opcao <= 6)
                        break;
                }
                catch
                {
                    Console.WriteLine("\nERRO: Por favor, digite somente números de 1 a 6 para selecionar uma opção\n");
                }
            } while (true);

            switch (opcao)
            {
                case 1:
                    break;
                case 2:
                    CadastrarDisciplinas();
                    break;
                case 3:
                    CadastrarAlunos();
                    break;
                case 4:
                    LancarNotas();
                    break;
                case 5:
                    AlterarNota();
                    break;
                case 6:
                    // Sair
                    break;
            }
        }
        #endregion

        #region Lançar Notas
        //Lançar notas de acordo com a disciplina
        static void LançarNotasDisciplina()
        {
            string conteudo = "", disciplinaEncontrada = "", conteudos = "";
            double Nota;
            bool verificador;
            int resposta = 0;

            Console.WriteLine("Dados carregados do arquivo:");

            if (File.Exists("Disciplinas.txt"))
            {

                for (int n = 0; n < qtdeD; n++)
                    Console.WriteLine($"{Disciplinas[n].Codigo} - {Disciplinas[n].Nome} - {Disciplinas[n].Sigla}");

                do
                {
                    verificador = false;
                    try
                    {
                        Console.WriteLine("Digite o código de uma disciplina: ");
                        resposta = Convert.ToInt16(Console.ReadLine());
                    }
                    catch
                    {
                        Console.WriteLine("Digite apenas números inteiros! ");
                        verificador = true;
                    }

                    for (int x = 0; x < qtdeD; x++)
                    {
                        if (resposta == Disciplinas[x].Codigo)
                        {
                            disciplinaEncontrada = Disciplinas[x].Nome;
                            verificador = false;
                            break;
                        }

                        else
                            verificador = true;
                    }

                } while (verificador == true);


                for (int i = qtdeN; i < qtdeA; i++)
                {
                    do
                    {
                        //conteudos = CarregarNotas(conteudo);

                        verificador = false;
                        try
                        {
                            Console.WriteLine($"{Alunos[i].Codigo} - {Alunos[i].Nome} \nDigite uma nota para este aluno entre (0/10)");
                            Nota = Convert.ToDouble(Console.ReadLine());
                        }
                        catch
                        {
                            Console.WriteLine("Digite apenas números inteiros ou decimais!");
                            Nota = -1;
                        }

                        if (Nota >= 0 && Nota <= 10)
                        {
                            qtdeN++;
                            Console.WriteLine("Nota Cadastrada");
                            conteudos = conteudos + disciplinaEncontrada + "|" + Alunos[i].Nome + "|" + Nota + Environment.NewLine;
                        }
                        else
                        {
                            Console.WriteLine("Nota inválida tente novamente");
                            verificador = true;
                        }
                    } while (verificador == true);

                    File.WriteAllText("Notas.txt", conteudos, Encoding.UTF8);
                }
            }
        }
        #endregion

        #region Método Lançar Notas
        // Lançamento de notas
        static void LancarNotas()
        {
            int codBuscar;
            int disciplinaEncontrada = 0;

            Console.Clear();
            Console.Write("LANÇAMENTO DE NOTAS POR DISCIPLINA: \n\n");

            Console.Write("Disciplinas: \n\n");
            for (int i = 0; i < qtdDisciplina; i++)
                Console.WriteLine($"Código: {Disciplinas[i].Codigo} Disciplina: {Disciplinas[i].Nome} - {Disciplinas[i].Sigla}");

            do
            {
                try
                {
                    bool Encontrado = false;

                    Console.Write("\nDigite o código de uma disciplina: ");
                    codBuscar = int.Parse(Console.ReadLine());

                    for (int x = 0; x < qtdDisciplina; x++)
                    {
                        if (codBuscar == Disciplinas[x].Codigo)
                        {
                            disciplinaEncontrada = Disciplinas[x].Codigo;
                            Encontrado = true;
                        }
                    }
                    if (Encontrado)
                        break;

                    else
                        Console.WriteLine("O código digitado não foi encontrado. Por favor, tente novamente ");

                }
                catch
                {
                    Console.WriteLine("Digite apenas números inteiros! ");
                }
            } while (true);

            Console.Write($"\n\nDisciplina escolhida: {disciplinaEncontrada}\n\n");

            for (int i = 0; i < qtdAluno; i++)
            {
                do
                {

                    try
                    {
                        if (VerificarExistenciaNota(i, disciplinaEncontrada) == "NTaCadastrado")
                        {
                            Console.Write($"{Alunos[i].Codigo} - {Alunos[i].Nome} \nDigite uma nota para este aluno entre (0/10): ");
                            double nota = int.Parse(Console.ReadLine());
                            if (nota >= 0 && nota <= 10)
                            {
                                Notas[qtdNota].CodAluno = Alunos[i].Codigo;
                                Notas[qtdNota].CodDisciplina = disciplinaEncontrada;
                                Notas[qtdNota].NotaAluno = nota;

                                qtdNota++;

                                Salvar();
                                break;
                            }
                            else
                                Console.WriteLine("Por favor, insira uma nota entre 0 e 10");
                        }
                        else
                            break;

                    }
                    catch
                    {
                        Console.WriteLine("\nDigite somente números!");
                    }
                } while (true);
            }

            Salvar();
            VoltarMenu();
            Console.ReadKey();
        }

        static string VerificarExistenciaNota(int alunoAtual, int disciplinaAtual)// Testa se irá cadastrar ou não um aluno que já teve nota cadastrada
        {

            for (int i = 0; i < qtdNota; i++)
            {
                if (Alunos[alunoAtual].Codigo == Notas[i].CodAluno && disciplinaAtual == Notas[i].CodDisciplina)
                    return "JaTaCadastrado";
            }
            return "NTaCadastrado";
        }

        #endregion
        static void AlterarNota()
        {
            int respCodAluno = 0;
            int respCodDisciplina = 0;
            int posicaoAluno = 0;
            int codDisciplina = 0;

            for (int i = 0; i < qtdAluno; i++)
                Console.WriteLine($"{Alunos[i].Codigo} - {Alunos[i].Nome} ");

            Console.Write("Digite o código do aluno: ");
            respCodAluno = int.Parse(Console.ReadLine());

            for (int i = 0; i < qtdAluno; i++)
            {
                if (Alunos[i].Codigo == respCodAluno)
                    posicaoAluno = i;
            }

            for (int x = 0; x < qtdDisciplina; x++)
                Console.WriteLine($"{Disciplinas[x].Codigo} - {Disciplinas[x].Nome} ");

            Console.Write("Digite o código da disciplina: ");
            respCodDisciplina = int.Parse(Console.ReadLine());

            for (int i = 0; i < qtdDisciplina; i++)
            {
                if (Disciplinas[i].Codigo == respCodDisciplina)
                    codDisciplina = respCodDisciplina;
            }

            if (VerificarExistenciaNota(posicaoAluno, codDisciplina) == "JaTaCadastrado")
            {
                Console.WriteLine("Digite a nota");
                Notas[posicaoAluno].NotaAluno = double.Parse(Console.ReadLine());
                Salvar();
                VoltarMenu();
            }
            else
            {
                Console.WriteLine("A nota ainda não foi cadastrada");
                VoltarMenu();
            }
        }    


      

        #region Método Cadastro de Disciplinas
        static void CadastrarDisciplinas() //cadastra a disciplina PS: Deichei Void pq por enquanto n estamos usando isso pra nada.
        {
            int qtde = 0;
            char resp;


            for (int i = qtdDisciplina; i < Disciplinas.Length; i++)
            {
                Console.Clear();
                Console.Write("CADASTRO DE DISCIPLINAS: \n\n");

                do
                {
                    Console.Write($"Digite o Nome da disciplina({i + 1}) (Max 5 disciplinas): ");
                    Disciplinas[i].Nome = Console.ReadLine().Trim();

                } while (Disciplinas[i].Nome.Length == 0 || Disciplinas[i].Nome.Length > 30);

                do
                {
                    Console.Write($"Digite uma Sigla para a disciplina({i + 1}) (Max 4 caracteres): ");
                    Disciplinas[i].Sigla = Console.ReadLine().ToUpper().Trim();

                } while (Disciplinas[i].Sigla.Length == 0 || Disciplinas[i].Sigla.Length > 4);

                do
                {
                    do
                    {
                        try  //tente
                        {
                            Console.Write($"Digite um Código para a disciplina({i + 1}) (Maior que 0): ");
                            Disciplinas[i].Codigo = Convert.ToInt16(Console.ReadLine().Trim()); //CUIDADO ELE CORTA OS 0 TB

                            for (int x = 0; x < qtdDisciplina; x++)
                            {
                                Console.WriteLine("O código inserido já existe");
                            }

                            break;
                        }
                        catch  //se digitar algo sem ser int
                        {
                            Console.WriteLine("Por favor digite somente números inteiros !");
                        }
                    } while (true);
                } while (Disciplinas[i].Codigo < 1);
                qtde++;

                Console.Write("\nDeseja cadastrar mais uma disciplina? (S/N): ");
                resp = Console.ReadLine().ToUpper().Trim()[0];

                qtdDisciplina++;

                if (resp != 'S')
                {
                    Salvar();
                    VoltarMenu();
                    break;
                }
            }
        }
        #endregion

        #region Método Cadastro de Alunos
        // Parte aluno
        static void CadastrarAlunos() //cadastra alunos PS: Deichei Void pq por enquanto n estamos usando isso pra nada.
        {
            int qtde = 0;
            char resp;

            for (int i = qtdAluno; i < Alunos.Length; i++)
            {
                Console.Clear();
                Console.Write("CADASTRO DE ALUNOS: \n\n");

                if (qtdAluno == Alunos.Length)
                {
                    Console.Write("O limite máximo de alunos cadastrados foi atingido (máximo de 40)");
                    break;
                }

                do
                {
                    Console.Write($"Digite o Nome do Aluno({i + 1}) (Max 40 Alunos): ");
                    Alunos[i].Nome = Console.ReadLine().Trim();

                } while (Alunos[i].Nome.Length == 0 || Alunos[i].Nome.Length > 30);

                do
                {
                    do
                    {
                        try  //tente
                        {
                            Console.Write($"Digite um Código para o Aluno({i + 1}) (Maior que 0): ");
                            Alunos[i].Codigo = Convert.ToInt16(Console.ReadLine().Trim());
                            break;
                        }
                        catch  //se digitar algo sem ser int
                        {
                            Console.WriteLine("\nPor favor digite somente números inteiros !");
                        }

                    } while (true);

                } while (Alunos[i].Codigo < 1);

                qtde++;
                Console.WriteLine("Deseja cadastrar mais um aluno? (S/N)");
                resp = Console.ReadLine().ToUpper().Trim()[0];

                qtdAluno++;

                if (resp != 'S')
                {
                    Salvar();
                    VoltarMenu();
                    break;
                } // Caso o usuário apenas aperte enter, o programa dará erro
            }
        }
        #endregion

        #region Método Salvar
        // Método Salvar
        static void Salvar()
        {
            StreamWriter escrever;
            escrever = File.CreateText(nomeArquivo);
            escrever.Close();

            escrever = File.AppendText(nomeArquivo);

            for (int i = 0; i < qtdAluno; i++)
                escrever.WriteLine($"@aluno !{Alunos[i].Codigo}?{Alunos[i].Nome}|");

            for (int j = 0; j < qtdDisciplina; j++)
                escrever.WriteLine($"@disci !{Disciplinas[j].Codigo}?{Disciplinas[j].Nome}|{Disciplinas[j].Sigla}");

            for (int k = 0; k < qtdNota; k++)
                escrever.WriteLine($"@notas !{Notas[k].CodAluno}?{Notas[k].CodDisciplina}|{Notas[k].NotaAluno}");


            escrever.Close();
        }
        #endregion

        #region Carregar Dados
        // Método Carregar 
        static void Carregar()
        {
            StreamReader ler;
            ler = File.OpenText(nomeArquivo);
            while (ler.EndOfStream != true)
            {
                string linha = ler.ReadLine();
                string tag = linha.Substring(0, 6);

                if (tag == "@aluno")
                {
                    Alunos[qtdAluno].Codigo = int.Parse(linha.Substring(linha.IndexOf("!") + 1, linha.IndexOf("?") - linha.IndexOf("!") - 1)); // Buscando pelos valores na linha, o código é obtido através de uma substring com valor inicial igual ao da tag "!" + 1 (para pegar o valor após a tag) e comprimento igual a posição da tag "?" - a posição da tag "!" - 1 (para pegar até o valor antes da tag)
                    Alunos[qtdAluno].Nome = linha.Substring(linha.IndexOf("?") + 1, linha.IndexOf("|") - 1 - linha.IndexOf("?"));
                    qtdAluno++;
                }
                else if (tag == "@disci")
                {
                    Disciplinas[qtdDisciplina].Codigo = int.Parse(linha.Substring(linha.IndexOf("!") + 1, linha.IndexOf("?") - linha.IndexOf("!") - 1));
                    Disciplinas[qtdDisciplina].Nome = linha.Substring(linha.IndexOf("?") + 1, linha.IndexOf("|") - 1 - linha.IndexOf("?"));
                    Disciplinas[qtdDisciplina].Sigla = linha.Substring(linha.IndexOf("|") + 1);
                    qtdDisciplina++;
                }
                else if (tag == "@notas")
                {
                    Notas[qtdNota].CodAluno = int.Parse(linha.Substring(linha.IndexOf("!") + 1, linha.IndexOf("?") - linha.IndexOf("!") - 1));
                    Notas[qtdNota].CodDisciplina = int.Parse(linha.Substring(linha.IndexOf("?") + 1, linha.IndexOf("|") - 1 - linha.IndexOf("?")));
                    Notas[qtdNota].NotaAluno = double.Parse(linha.Substring(linha.IndexOf("|") + 1));
                    qtdNota++;
                }
                else
                    Console.WriteLine("Erro");
            }
            ler.Close();
        }
        #endregion

        static void VoltarMenu()
        {
            Console.Clear();
            Menu();
        }

        /*
        do
        {
            
            break;
        } while (true);*/


        // Resta: Verificar se há códigos parecidos, otimizar, melhorar a interface, cores, lançamento e alteração de notas, limitar a inserção de novos dados
    }
}
