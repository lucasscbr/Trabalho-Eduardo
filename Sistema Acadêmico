using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;

namespace N1
{
    class Program
    {
        #region STRUCTS
        struct Disciplina //estrutura da disciplina
        {
            public int Codigo;
            public string Nome, Sigla;
        }

        struct Aluno //estrutura do Aluno
        {
            public int Codigo;
            public string Nome;
            public double media;
        }

        struct Nota
        {
            public int CodDisciplina;
            public int CodAluno;
            public double NotaAluno;
        }

        #endregion

        #region ARRAYS
        static Disciplina[] Disciplinas = new Disciplina[5]; //vetor disciplina de no max 5 disciplinas
        static Aluno[] Alunos = new Aluno[40]; //vetor Aluno de no max 40 Alunos
        static Nota[] Notas = new Nota[200]; //vetor Nota de no max 40 Alunos

        #endregion

        const string nomeArquivo = "dadosSalvos.txt";
        static int qtdAluno = 0,
                   qtdDisciplina = 0,
                   qtdNota = 0;

        static void Main(string[] args)
        {
            if (!File.Exists(nomeArquivo))
                Salvar();

            Carregar();

            Menu();

            Console.ReadKey();
        }

        #region Método Menu
        static void Menu()
        {
            int opcao = 0;

            Console.Clear();
            Console.Write("--- SISTEMA DE DIGITAÇÃO DE NOTAS --- \n\nBem vindo! Digite uma opção: " +
                "\n\n(1) Desenvolvedores \n(2) Cadastro de Disciplinas \n(3) Cadastro de alunos \n(4) Lançamento de notas por disciplina" +
                "\n(5) Alteração de nota do aluno \n(6) Consultar Notas \n(7) Consultar Situação \n(8) Desenvolvedores \n(9) Sair");

            do
            {
                try
                {
                    Console.Write("\n\nSua opção: ");
                    opcao = int.Parse(Console.ReadLine());
                    if (opcao > 0 && opcao <= 8)
                        break;
                }
                catch
                {
                    Console.WriteLine("\nERRO: Por favor, digite somente números de 1 a 6 para selecionar uma opção\n");
                }
            } while (true);

            switch (opcao)
            {
                case 1:
                    break;
                case 2:
                    CadastrarDisciplinas();
                    break;
                case 3:
                    CadastrarAlunos();
                    break;
                case 4:
                    LancarNotas();
                    break;
                case 5:
                    AlterarNota();
                    break;
                case 6:
                    ConsultaNotas();
                    break;
                case 7:
                    ConsultarSituação();
                    break;
                case 8:
                    Desenvolvedores();
                    break;
                case 9:
                    break;
            }
        }
        #endregion



        #region Método Lançar Notas
        // Lançamento de notas
        static void LancarNotas()
        {
            int codBuscar;
            int disciplinaEncontrada = 0;

            Console.Clear();
            Console.Write("LANÇAMENTO DE NOTAS POR DISCIPLINA: \n\n");

            Console.Write("Disciplinas: \n\n");
            for (int i = 0; i < qtdDisciplina; i++)
                Console.WriteLine($"Código: {Disciplinas[i].Codigo} Disciplina: {Disciplinas[i].Nome} - {Disciplinas[i].Sigla}");

            do
            {
                try
                {
                    bool Encontrado = false;

                    Console.Write("\nDigite o código de uma disciplina: ");
                    codBuscar = int.Parse(Console.ReadLine());

                    for (int x = 0; x < qtdDisciplina; x++)
                    {
                        if (codBuscar == Disciplinas[x].Codigo)
                        {
                            disciplinaEncontrada = Disciplinas[x].Codigo;
                            Encontrado = true;
                        }
                    }
                    if (Encontrado)
                        break;

                    else
                        Console.WriteLine("O código digitado não foi encontrado. Por favor, tente novamente ");

                }
                catch
                {
                    Console.WriteLine("Digite apenas números inteiros! ");
                }
            } while (true);

            Console.Write($"\n\nDisciplina escolhida: {disciplinaEncontrada}\n\n");

            for (int i = 0; i < qtdAluno; i++)
            {
                do
                {

                    try
                    {
                        if (VerificarExistenciaNota(i, disciplinaEncontrada) == "NTaCadastrado")
                        {
                            Console.Write($"{Alunos[i].Codigo} - {Alunos[i].Nome} \nDigite uma nota para este aluno entre (0/10): ");
                            double nota = int.Parse(Console.ReadLine());
                            if (nota >= 0 && nota <= 10)
                            {
                                Notas[qtdNota].CodAluno = Alunos[i].Codigo;
                                Notas[qtdNota].CodDisciplina = disciplinaEncontrada;
                                Notas[qtdNota].NotaAluno = nota;

                                qtdNota++;

                                Salvar();
                                break;
                            }
                            else
                                Console.WriteLine("Por favor, insira uma nota entre 0 e 10");
                        }
                        else
                            break;

                    }
                    catch
                    {
                        Console.WriteLine("\nDigite somente números!");
                    }
                } while (true);
            }

            Salvar();
            VoltarMenu();
            Console.ReadKey();
        }

        static string VerificarExistenciaNota(int alunoAtual, int disciplinaAtual)// Testa se irá cadastrar ou não um aluno que já teve nota cadastrada
        {

            for (int i = 0; i < qtdNota; i++)
            {
                if (Alunos[alunoAtual].Codigo == Notas[i].CodAluno && disciplinaAtual == Notas[i].CodDisciplina)
                    return "JaTaCadastrado";
            }
            return "NTaCadastrado";
        }

        static int VerificarIgualdadeCodigoAluno()
        {
            int respCodAluno = 0;
            bool verificador = false;
            int posicaoAluno = 0;

            for (int i = 0; i < qtdAluno; i++)
                Console.WriteLine($"{Alunos[i].Codigo} - {Alunos[i].Nome} ");

            do
            {
                verificador = false;
                try
                {
                    Console.Write("Digite o código do aluno: ");
                    respCodAluno = int.Parse(Console.ReadLine());
                }
                catch
                {
                    Console.WriteLine("Por favor digite apenas numeros inteiros");
                    verificador = true;
                }

            } while (verificador == true);

            for (int i = 0; i < qtdAluno; i++)
            {
                if (Alunos[i].Codigo == respCodAluno)
                    posicaoAluno = i;
            }

            return posicaoAluno;

        }

        static int VerificarIgualdadeCodigoDisciplina()
        {
            int respCodDisciplina = 0;
            int codDisciplina = 0;
            bool verificador = false;

            for (int x = 0; x < qtdDisciplina; x++)
                Console.WriteLine($"{Disciplinas[x].Codigo} - {Disciplinas[x].Nome} ");

            do
            {
                verificador = false;
                try
                {
                    Console.Write("Digite o código da disciplina: ");
                    respCodDisciplina = int.Parse(Console.ReadLine());
                }
                catch
                {
                    Console.WriteLine("Por favor digite apenas numeros inteiros");
                    verificador = true;
                }

            } while (verificador == true);

            for (int i = 0; i < qtdDisciplina; i++)
            {
                if (Disciplinas[i].Codigo == respCodDisciplina)
                    codDisciplina = respCodDisciplina;
            }

            return codDisciplina;
        }

        #endregion
        static void AlterarNota()
        {
            int posicaoAluno, codDisciplina;
            posicaoAluno = VerificarIgualdadeCodigoAluno();
            codDisciplina = VerificarIgualdadeCodigoDisciplina();

            if (VerificarExistenciaNota(posicaoAluno, codDisciplina) == "JaTaCadastrado")
            {
                Console.WriteLine("Digite a nota");
                Notas[posicaoAluno].NotaAluno = double.Parse(Console.ReadLine());
                Salvar();
                VoltarMenu();
            }
            else
            {
                Console.WriteLine("A nota ainda não foi cadastrada");
                VoltarMenu();
            }

        }

        #region Método Consulta de Notas
        static void ConsultaNotas()
        {
            int resp = 0;
            Console.Clear();
            Console.Write("CONSULTA DE NOTAS: \n\n(1) Por aluno \n(2) Por disciplina \n(3) Mapa de notas \n\nSua opção: ");

            do
            {
                try
                {
                    resp = int.Parse(Console.ReadLine());
                    if (resp > 0 && resp <= 3)
                        break;
                    else
                        Console.WriteLine("\nPor favor, digite somente números inteiros de 1 a 3\n");
                }
                catch
                {
                    Console.WriteLine("\nPor favor, digite somente números inteiros de 1 a 3\n");
                }
            } while (true);

            switch (resp)
            {
                case 1:
                    ConsultaPorAluno();
                    break;
                case 2:
                    break;
                case 3:
                    break;
            }
        }

        static void ConsultaPorAluno()
        {
            int posicaoAluno = 0;

            Console.Clear();
            Console.Write("CONSULTA DE NOTAS: \n\nConsulta por aluno \n\n");

            posicaoAluno = VerificarIgualdadeCodigoAluno();

            Console.WriteLine($"Nome: {Alunos[posicaoAluno]}\n");
            for (int i = 0; i < qtdDisciplina; i++)
            {
                Console.WriteLine($"{Disciplinas[i].Nome.PadRight(30)}: {NotaConsultada(Alunos[posicaoAluno].Codigo, Disciplinas[i].Codigo)}");
            }

            Console.ReadKey();
            VoltarMenu();
        }

        /// <summary>
        /// Retorna a nota do aluno utilizando como parâmetros os códigos de aluno e disciplina a qual a nota é de interesse. Caso não hajam notas inseridas na disciplina, retorna um "-"
        /// </summary>
        /// <param name="codAluno">Código do aluno, da struct Aluno</param>
        /// <param name="codDisciplina">Código da Disciplina, da struct Disciplina</param>
        /// <returns></returns>
        static string NotaConsultada(int codAluno, int codDisciplina)
        {
            for (int x = 0; x < qtdNota; x++)
            {
                if (Notas[x].CodAluno == codAluno && Notas[x].CodDisciplina == codDisciplina)
                {
                    return Notas[x].NotaAluno.ToString();
                }
            }
            return "-";

        }

        #endregion

        static void ConsultarSituação()
        {
            ConsoleColor cor = Console.ForegroundColor;
            double soma;
            

            for (int x = 0; x < qtdAluno; x++)
            {
                soma = 0;
                int cont = 0;

                for (int j = 0; j < qtdNota; j++)
                {
                    if (Alunos[x].Codigo == Notas[j].CodAluno)
                    {
                        soma += Notas[j].NotaAluno;
                        cont++;
                    }
                }

                Alunos[x].media = soma / qtdDisciplina;
                if (cont++ < qtdDisciplina)
                    Alunos[x].media = 1;
            }


            for (int i = 0; i < qtdAluno; i++)
            {
                if (Alunos[i].media >= 5)
                    Console.WriteLine($"{Alunos[i].Codigo} - {Alunos[i].Nome} - Aprovado");
                else if(Alunos[i].media < 5)
                {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine($"{Alunos[i].Codigo} - {Alunos[i].Nome} - Reprovado");
                    Console.ForegroundColor = cor;
                }
            }

            Console.ReadKey();
            VoltarMenu();
        }

        static void Desenvolvedores()
        {
            Console.WriteLine("081190015 - Lucas Santos Costa : Escrever dps oq fiz " +
                "\n0811900(complete) - Roger Complete : Escrever dps oq fez");

            Console.WriteLine("Oquê foi feito: \nExibir desenvolvedores \nCadastro de disciplinas \nCadastro de alunos \nLançamento de notas por disciplina " +
                "\nAlteração de nota do aluno \nConsulta de notas por aluno \nConsulta de notas por disciplina \nMapa de notas(loading) \nConsulta de situação" +
                "\nComplexidade ciclomática <= 9 pontos(Loading) ");
        }



        #region Método Cadastro de Disciplinas
        static void CadastrarDisciplinas() //cadastra a disciplina PS: Deichei Void pq por enquanto n estamos usando isso pra nada.
        {
            int qtde = 0;
            char resp;


            for (int i = qtdDisciplina; i < Disciplinas.Length; i++)
            {
                Console.Clear();
                Console.Write("CADASTRO DE DISCIPLINAS: \n\n");

                do
                {
                    Console.Write($"Digite o Nome da disciplina({i + 1}) (Max 5 disciplinas): ");
                    Disciplinas[i].Nome = Console.ReadLine().Trim();

                } while (Disciplinas[i].Nome.Length == 0 || Disciplinas[i].Nome.Length > 30);

                do
                {
                    Console.Write($"Digite uma Sigla para a disciplina({i + 1}) (Max 4 caracteres): ");
                    Disciplinas[i].Sigla = Console.ReadLine().ToUpper().Trim();

                } while (Disciplinas[i].Sigla.Length == 0 || Disciplinas[i].Sigla.Length > 4);

                do
                {
                    do
                    {
                        try  //tente
                        {
                            Console.Write($"Digite um Código para a disciplina({i + 1}) (Maior que 0): ");
                            Disciplinas[i].Codigo = Convert.ToInt16(Console.ReadLine().Trim()); //CUIDADO ELE CORTA OS 0 TB

                            for (int x = 0; x < qtdDisciplina; x++)
                            {
                                Console.WriteLine("O código inserido já existe");
                            }

                            break;
                        }
                        catch  //se digitar algo sem ser int
                        {
                            Console.WriteLine("Por favor digite somente números inteiros !");
                        }
                    } while (true);
                } while (Disciplinas[i].Codigo < 1);
                qtde++;

                Console.Write("\nDeseja cadastrar mais uma disciplina? (S/N): ");
                resp = Console.ReadLine().ToUpper().Trim()[0];

                qtdDisciplina++;

                if (resp != 'S')
                {
                    Salvar();
                    VoltarMenu();
                    break;
                }
            }
        }
        #endregion

        #region Método Cadastro de Alunos
        // Parte aluno
        static void CadastrarAlunos() //cadastra alunos PS: Deichei Void pq por enquanto n estamos usando isso pra nada.
        {
            int qtde = 0;
            char resp;

            for (int i = qtdAluno; i < Alunos.Length; i++)
            {
                Console.Clear();
                Console.Write("CADASTRO DE ALUNOS: \n\n");

                if (qtdAluno == Alunos.Length)
                {
                    Console.Write("O limite máximo de alunos cadastrados foi atingido (máximo de 40)");
                    break;
                }

                do
                {
                    Console.Write($"Digite o Nome do Aluno({i + 1}) (Max 40 Alunos): ");
                    Alunos[i].Nome = Console.ReadLine().Trim();

                } while (Alunos[i].Nome.Length == 0 || Alunos[i].Nome.Length > 30);

                do
                {
                    do
                    {
                        try  //tente
                        {
                            Console.Write($"Digite um Código para o Aluno({i + 1}) (Maior que 0): ");
                            Alunos[i].Codigo = Convert.ToInt16(Console.ReadLine().Trim());
                            break;
                        }
                        catch  //se digitar algo sem ser int
                        {
                            Console.WriteLine("\nPor favor digite somente números inteiros !");
                        }

                    } while (true);

                } while (Alunos[i].Codigo < 1);

                qtde++;
                Console.WriteLine("Deseja cadastrar mais um aluno? (S/N)");
                resp = Console.ReadLine().ToUpper().Trim()[0];

                qtdAluno++;

                if (resp != 'S')
                {
                    Salvar();
                    VoltarMenu();
                    break;
                } // Caso o usuário apenas aperte enter, o programa dará erro
            }
        }
        #endregion

        #region Método Salvar
        // Método Salvar
        static void Salvar()
        {
            StreamWriter escrever;
            escrever = File.CreateText(nomeArquivo);
            escrever.Close();

            escrever = File.AppendText(nomeArquivo);

            for (int i = 0; i < qtdAluno; i++)
                escrever.WriteLine($"@aluno !{Alunos[i].Codigo}?{Alunos[i].Nome}|");

            for (int j = 0; j < qtdDisciplina; j++)
                escrever.WriteLine($"@disci !{Disciplinas[j].Codigo}?{Disciplinas[j].Nome}|{Disciplinas[j].Sigla}");

            for (int k = 0; k < qtdNota; k++)
                escrever.WriteLine($"@notas !{Notas[k].CodAluno}?{Notas[k].CodDisciplina}|{Notas[k].NotaAluno}");


            escrever.Close();
        }
        #endregion

        #region Carregar Dados
        // Método Carregar 
        static void Carregar()
        {
            StreamReader ler;
            ler = File.OpenText(nomeArquivo);
            while (ler.EndOfStream != true)
            {
                string linha = ler.ReadLine();
                string tag = linha.Substring(0, 6);

                if (tag == "@aluno")
                {
                    Alunos[qtdAluno].Codigo = int.Parse(linha.Substring(linha.IndexOf("!") + 1, linha.IndexOf("?") - linha.IndexOf("!") - 1)); // Buscando pelos valores na linha, o código é obtido através de uma substring com valor inicial igual ao da tag "!" + 1 (para pegar o valor após a tag) e comprimento igual a posição da tag "?" - a posição da tag "!" - 1 (para pegar até o valor antes da tag)
                    Alunos[qtdAluno].Nome = linha.Substring(linha.IndexOf("?") + 1, linha.IndexOf("|") - 1 - linha.IndexOf("?"));
                    qtdAluno++;
                }
                else if (tag == "@disci")
                {
                    Disciplinas[qtdDisciplina].Codigo = int.Parse(linha.Substring(linha.IndexOf("!") + 1, linha.IndexOf("?") - linha.IndexOf("!") - 1));
                    Disciplinas[qtdDisciplina].Nome = linha.Substring(linha.IndexOf("?") + 1, linha.IndexOf("|") - 1 - linha.IndexOf("?"));
                    Disciplinas[qtdDisciplina].Sigla = linha.Substring(linha.IndexOf("|") + 1);
                    qtdDisciplina++;
                }
                else if (tag == "@notas")
                {
                    Notas[qtdNota].CodAluno = int.Parse(linha.Substring(linha.IndexOf("!") + 1, linha.IndexOf("?") - linha.IndexOf("!") - 1));
                    Notas[qtdNota].CodDisciplina = int.Parse(linha.Substring(linha.IndexOf("?") + 1, linha.IndexOf("|") - 1 - linha.IndexOf("?")));
                    Notas[qtdNota].NotaAluno = double.Parse(linha.Substring(linha.IndexOf("|") + 1));
                    qtdNota++;
                }
                else
                    Console.WriteLine("Erro");
            }
            ler.Close();
        }
        #endregion

        static void VoltarMenu()
        {
            Console.Clear();
            Menu();
        }

        /*
        do
        {
            
            break;
        } while (true);*/


        // Resta: Verificar se há códigos parecidos, otimizar, melhorar a interface, cores, lançamento e alteração de notas, limitar a inserção de novos dados
    }
}
